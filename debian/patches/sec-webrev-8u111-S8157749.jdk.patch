# HG changeset patch
# User msheppar
# Date 1469689354 -3600
#      Thu Jul 28 08:02:34 2016 +0100
# Node ID c959cff8f7accc5dc2a334a977a95fe1dcb9e812
# Parent  67252a0030a1e907583f406cc2441764de4f89dd
8157749: Improve handling of DNS error replies
Reviewed-by: chegar, rriggs, coffeys

---
 openjdk/jdk/make/java/java/mapfile-vers               |    1 
 openjdk/jdk/src/share/native/common/jni_util.c        |   55 ++++++++++++++++++
 openjdk/jdk/src/share/native/common/jni_util.h        |    7 ++
 openjdk/jdk/src/solaris/native/java/net/net_util_md.c |    7 --
 openjdk/jdk/src/windows/native/java/net/net_util_md.c |    4 -
 5 files changed, 67 insertions(+), 7 deletions(-)

--- openjdk/jdk/make/java/java/mapfile-vers.orig
+++ openjdk/jdk/make/java/java/mapfile-vers
@@ -56,6 +56,7 @@ SUNWprivate_1.1 {
 		JNU_ThrowArrayIndexOutOfBoundsException;
 		JNU_ThrowByName;
 		JNU_ThrowByNameWithLastError;
+                JNU_ThrowByNameWithMessageAndLastError;
 		JNU_ThrowClassNotFoundException;
 		JNU_ThrowIllegalAccessError;
 		JNU_ThrowIllegalAccessException;
--- openjdk/jdk/src/share/native/common/jni_util.c.orig
+++ openjdk/jdk/src/share/native/common/jni_util.c
@@ -148,6 +148,61 @@ JNU_ThrowInstantiationException(JNIEnv *
 }
 
 
+/*
+ * Throw an exception by name, using a given message and the string
+ * returned by getLastErrorString to construct the detail string.
+ */
+JNIEXPORT void JNICALL
+JNU_ThrowByNameWithMessageAndLastError
+  (JNIEnv *env, const char *name, const char *message)
+{
+    char buf[256];
+    size_t n = getLastErrorString(buf, sizeof(buf));
+    size_t messagelen = message == NULL ? 0 : strlen(message);
+
+    if (n > 0) {
+        jstring s = JNU_NewStringPlatform(env, buf);
+        if (s != NULL) {
+            jobject x = NULL;
+            if (messagelen) {
+                jstring s2 = NULL;
+                size_t messageextlen = messagelen + 4;
+                char *str1 = (char *)malloc((messageextlen) * sizeof(char));
+                if (str1 == 0) {
+                    JNU_ThrowOutOfMemoryError(env, 0);
+                    return;
+                }
+                jio_snprintf(str1, messageextlen, " (%s)", message);
+                s2 = (*env)->NewStringUTF(env, str1);
+                free(str1);
+                if (s2 != NULL) {
+                    jstring s3 = JNU_CallMethodByName(
+                                     env, NULL, s, "concat",
+                                     "(Ljava/lang/String;)Ljava/lang/String;",
+                                     s2).l;
+                    (*env)->DeleteLocalRef(env, s2);
+                    if (s3 != NULL) {
+                        (*env)->DeleteLocalRef(env, s);
+                        s = s3;
+                    }
+                }
+            }
+            x = JNU_NewObjectByName(env, name, "(Ljava/lang/String;)V", s);
+            if (x != NULL) {
+                (*env)->Throw(env, x);
+            }
+        }
+    }
+
+    if (!(*env)->ExceptionOccurred(env)) {
+        if (messagelen) {
+            JNU_ThrowByName(env, name, message);
+        } else {
+            JNU_ThrowByName(env, name, "no further information");
+        }
+    }
+}
+
 /* Throw an exception by name, using the string returned by
  * JVM_LastErrorString for the detail string.  If the last-error
  * string is NULL, use the given default detail string.
--- openjdk/jdk/src/share/native/common/jni_util.h.orig
+++ openjdk/jdk/src/share/native/common/jni_util.h
@@ -105,6 +105,13 @@ JNIEXPORT void JNICALL
 JNU_ThrowByNameWithLastError(JNIEnv *env, const char *name,
                              const char *defaultMessage);
 
+/* Throw an exception by name, using a given message and the string
+ * returned by getLastErrorString to construct the detail string.
+ */
+JNIEXPORT void JNICALL
+JNU_ThrowByNameWithMessageAndLastError
+  (JNIEnv *env, const char *name, const char *message);
+
 /* Throw an IOException, using the last-error string for the detail
  * string.  If the last-error string is NULL, use the given default
  * detail string.
--- openjdk/jdk/src/solaris/native/java/net/net_util_md.c.orig
+++ openjdk/jdk/src/solaris/native/java/net/net_util_md.c
@@ -112,6 +112,8 @@ void setDefaultScopeID(JNIEnv *env, stru
 int getDefaultScopeID(JNIEnv *env) {
     static jclass ni_class = NULL;
     static jfieldID ni_defaultIndexID;
+    int defaultIndex = 0;
+
     if (ni_class == NULL) {
         jclass c = (*env)->FindClass(env, "java/net/NetworkInterface");
         CHECK_NULL_RETURN(c, 0);
@@ -121,7 +123,6 @@ int getDefaultScopeID(JNIEnv *env) {
             env, c, "defaultIndex", "I");
         ni_class = c;
     }
-    int defaultIndex = 0;
     defaultIndex = (*env)->GetStaticIntField(env, ni_class,
                                                  ni_defaultIndexID);
     return defaultIndex;
@@ -284,9 +285,7 @@ int cmpScopeID (unsigned int scope, stru
 void
 NET_ThrowByNameWithLastError(JNIEnv *env, const char *name,
                    const char *defaultDetail) {
-    char errmsg[255];
-    sprintf(errmsg, "errno: %d, error: %s\n", errno, defaultDetail);
-    JNU_ThrowByNameWithLastError(env, name, errmsg);
+    JNU_ThrowByNameWithMessageAndLastError(env, name, defaultDetail);
 }
 
 void
--- openjdk/jdk/src/windows/native/java/net/net_util_md.c.orig
+++ openjdk/jdk/src/windows/native/java/net/net_util_md.c
@@ -218,9 +218,7 @@ NET_ThrowSocketException(JNIEnv *env, ch
 void
 NET_ThrowByNameWithLastError(JNIEnv *env, const char *name,
                    const char *defaultDetail) {
-    char errmsg[255];
-    sprintf(errmsg, "errno: %d, error: %s\n", WSAGetLastError(), defaultDetail);
-    JNU_ThrowByNameWithLastError(env, name, errmsg);
+    JNU_ThrowByNameWithMessageAndLastError(env, name, defaultDetail);
 }
 
 jfieldID
