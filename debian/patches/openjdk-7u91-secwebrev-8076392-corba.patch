# HG changeset patch
# User msheppar
# Date 1436888981 -3600
#      Tue Jul 14 16:49:41 2015 +0100
# Node ID d185c856ef85de2f9ee2c318d3084869e6f2a836
# Parent  0ce82d68859693bd2d80ef8f8c4eb31850062dd6
8076392: Improve IIOPInputStream consistency
Reviewed-by: rriggs, coffeys, skoivu, ahgross

Index: openjdk/corba/src/share/classes/com/sun/corba/se/impl/io/IIOPInputStream.java
===================================================================
--- openjdk/corba/src/share/classes/com/sun/corba/se/impl/io/IIOPInputStream.java.orig
+++ openjdk/corba/src/share/classes/com/sun/corba/se/impl/io/IIOPInputStream.java
@@ -567,6 +567,11 @@ public class IIOPInputStream
                 // XXX I18N, logging needed.
                 throw new NotActiveException("defaultReadObjectDelegate");
 
+            if (!currentClassDesc.forClass().isAssignableFrom(
+                    currentObject.getClass())) {
+                throw new IOException("Object Type mismatch");
+            }
+
             // The array will be null unless fields were retrieved
             // remotely because of a serializable version difference.
             // Bug fix for 4365188.  See the definition of
@@ -2247,6 +2252,27 @@ public class IIOPInputStream
 
                 try {
                     Class fieldCl = fields[i].getClazz();
+                    if ((objectValue != null)
+                            && (!fieldCl.isAssignableFrom(
+                                    objectValue.getClass()))) {
+                        throw new IllegalArgumentException("Field mismatch");
+                    }
+                   Field classField = null;
+                    try {
+                        classField = cl.getDeclaredField(fields[i].getName());
+                    } catch (NoSuchFieldException nsfEx) {
+                        throw new IllegalArgumentException(nsfEx);
+                    } catch (SecurityException secEx) {
+                        throw new IllegalArgumentException(secEx.getCause());
+                    }
+                    Class<?> declaredFieldClass = classField.getType();
+
+                    // check input field type is a declared field type
+                    // input field is a subclass of the declared field
+                    if (!declaredFieldClass.isAssignableFrom(fieldCl)) {
+                        throw new IllegalArgumentException(
+                                "Field Type mismatch");
+                    }
                     if (objectValue != null && !fieldCl.isInstance(objectValue)) {
                         throw new IllegalArgumentException();
                     }
