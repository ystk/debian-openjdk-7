# HG changeset patch
# User dmarkov
# Date 1468311599 -10800
#      Tue Jul 12 11:19:59 2016 +0300
# Node ID 1a32d9a1ee1314e2bbede6bc9885fca4dd342be8
# Parent  01440b695cb5d2a6eabebb9520d98acbd3957d00
8157753: Audio replay enhancement
Reviewed-by: prr

---
 openjdk/jdk/src/macosx/native/com/sun/media/sound/PLATFORM_API_MacOSX_PCM.cpp         |    4 ++++
 openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_BsdOS_ALSA_PCM.c      |    5 ++++-
 openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_LinuxOS_ALSA_PCM.c    |    5 ++++-
 openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_SolarisOS_PCM.c       |    4 ++++
 openjdk/jdk/src/windows/native/com/sun/media/sound/PLATFORM_API_WinOS_DirectSound.cpp |    4 ++++
 5 files changed, 20 insertions(+), 2 deletions(-)

--- openjdk/jdk/src/macosx/native/com/sun/media/sound/PLATFORM_API_MacOSX_PCM.cpp.orig
+++ openjdk/jdk/src/macosx/native/com/sun/media/sound/PLATFORM_API_MacOSX_PCM.cpp
@@ -819,6 +819,10 @@ void* DAUDIO_Open(INT32 mixerIndex, INT3
         ERROR1("<<DAUDIO_Open: ERROR: unsupported encoding (%d)\n", encoding);
         return NULL;
     }
+    if (channels <= 0) {
+        ERROR1("<<DAUDIO_Open: ERROR: Invalid number of channels=%d!\n", channels);
+        return NULL;
+    }
 
     OSX_DirectAudioDevice *device = new OSX_DirectAudioDevice();
 
--- openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_BsdOS_ALSA_PCM.c.orig
+++ openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_BsdOS_ALSA_PCM.c
@@ -434,7 +434,10 @@ void* DAUDIO_Open(INT32 mixerIndex, INT3
         snd_output_stdio_attach(&ALSA_OUTPUT, stdout, 0);
     }
 #endif
-
+    if (channels <= 0) {
+        ERROR1("ERROR: Invalid number of channels=%d!\n", channels);
+        return NULL;
+    }
     info = (AlsaPcmInfo*) malloc(sizeof(AlsaPcmInfo));
     if (!info) {
         ERROR0("Out of memory\n");
--- openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_LinuxOS_ALSA_PCM.c.orig
+++ openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_LinuxOS_ALSA_PCM.c
@@ -434,7 +434,10 @@ void* DAUDIO_Open(INT32 mixerIndex, INT3
         snd_output_stdio_attach(&ALSA_OUTPUT, stdout, 0);
     }
 #endif
-
+    if (channels <= 0) {
+        ERROR1("ERROR: Invalid number of channels=%d!\n", channels);
+        return NULL;
+    }
     info = (AlsaPcmInfo*) malloc(sizeof(AlsaPcmInfo));
     if (!info) {
         ERROR0("Out of memory\n");
--- openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_SolarisOS_PCM.c.orig
+++ openjdk/jdk/src/solaris/native/com/sun/media/sound/PLATFORM_API_SolarisOS_PCM.c
@@ -182,6 +182,10 @@ void* DAUDIO_Open(INT32 mixerIndex, INT3
         ERROR1(" DAUDIO_Open: invalid encoding %d\n", (int) encoding);
         return NULL;
     }
+    if (channels <= 0) {
+        ERROR1(" DAUDIO_Open: Invalid number of channels=%d!\n", channels);
+        return NULL;
+    }
 
     info = (SolPcmInfo*) malloc(sizeof(SolPcmInfo));
     if (!info) {
--- openjdk/jdk/src/windows/native/com/sun/media/sound/PLATFORM_API_WinOS_DirectSound.cpp.orig
+++ openjdk/jdk/src/windows/native/com/sun/media/sound/PLATFORM_API_WinOS_DirectSound.cpp
@@ -859,6 +859,10 @@ void* DAUDIO_Open(INT32 mixerIndex, INT3
         ERROR1("DAUDIO_Open: ERROR: cannot open the device with encoding=%d!\n", encoding);
         return NULL;
     }
+    if (channels <= 0) {
+        ERROR1("DAUDIO_Open: ERROR: Invalid number of channels=%d!\n", channels);
+        return NULL;
+    }
     if (sampleSizeInBits > 8 &&
 #ifdef _LITTLE_ENDIAN
         isBigEndian
