# HG changeset patch
# User dmarkov
# Date 1467734619 -10800
#      Tue Jul 05 19:03:39 2016 +0300
# Node ID cd1f533f297a67921ab73208aea927e2a3c8ab85
# Parent  edc99235661ac86b0925077261662e0c620cf9f4
8158302: Handle contextual glyph substitutions
Reviewed-by: prr

---
 openjdk/jdk/src/share/native/sun/font/layout/ContextualGlyphSubstProc.cpp    |    5 +++--
 openjdk/jdk/src/share/native/sun/font/layout/ContextualGlyphSubstProc.h      |    2 +-
 openjdk/jdk/src/share/native/sun/font/layout/IndicRearrangementProcessor.cpp |    6 +++---
 openjdk/jdk/src/share/native/sun/font/layout/IndicRearrangementProcessor.h   |    2 +-
 openjdk/jdk/src/share/native/sun/font/layout/LigatureSubstProc.cpp           |    3 +--
 openjdk/jdk/src/share/native/sun/font/layout/LigatureSubstProc.h             |    2 +-
 openjdk/jdk/src/share/native/sun/font/layout/StateTableProcessor.cpp         |    3 ++-
 openjdk/jdk/src/share/native/sun/font/layout/StateTableProcessor.h           |    2 +-
 8 files changed, 13 insertions(+), 12 deletions(-)

--- openjdk/jdk/src/share/native/sun/font/layout/ContextualGlyphSubstProc.cpp.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/ContextualGlyphSubstProc.cpp
@@ -46,6 +46,7 @@ UOBJECT_DEFINE_RTTI_IMPLEMENTATION(Conte
 ContextualGlyphSubstitutionProcessor::ContextualGlyphSubstitutionProcessor(const LEReferenceTo<MorphSubtableHeader> &morphSubtableHeader, LEErrorCode &success)
   : StateTableProcessor(morphSubtableHeader, success), entryTable(), contextualGlyphSubstitutionHeader(morphSubtableHeader, success)
 {
+  if (LE_FAILURE(success)) return;
   contextualGlyphSubstitutionHeader.orphan();
   substitutionTableOffset = SWAPW(contextualGlyphSubstitutionHeader->substitutionTableOffset);
 
@@ -66,10 +67,10 @@ void ContextualGlyphSubstitutionProcesso
     markGlyph = 0;
 }
 
-ByteOffset ContextualGlyphSubstitutionProcessor::processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index)
+ByteOffset ContextualGlyphSubstitutionProcessor::processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success)
 {
-  LEErrorCode success = LE_NO_ERROR;
   const ContextualGlyphSubstitutionStateEntry *entry = entryTable.getAlias(index, success);
+  if (LE_FAILURE(success)) return 0;
   ByteOffset newState = SWAPW(entry->newStateOffset);
   le_int16 flags = SWAPW(entry->flags);
   WordOffset markOffset = SWAPW(entry->markOffset);
--- openjdk/jdk/src/share/native/sun/font/layout/ContextualGlyphSubstProc.h.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/ContextualGlyphSubstProc.h
@@ -52,7 +52,7 @@ class ContextualGlyphSubstitutionProcess
 public:
     virtual void beginStateTable();
 
-    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index);
+    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success);
 
     virtual void endStateTable();
 
--- openjdk/jdk/src/share/native/sun/font/layout/IndicRearrangementProcessor.cpp.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/IndicRearrangementProcessor.cpp
@@ -63,10 +63,10 @@ void IndicRearrangementProcessor::beginS
     lastGlyph = 0;
 }
 
-ByteOffset IndicRearrangementProcessor::processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index)
+ByteOffset IndicRearrangementProcessor::processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success)
 {
-  LEErrorCode success = LE_NO_ERROR; // todo- make a param?
-  const IndicRearrangementStateEntry *entry = entryTable.getAlias(index,success);
+    const IndicRearrangementStateEntry *entry = entryTable.getAlias(index, success);
+    if (LE_FAILURE(success)) return 0;
     ByteOffset newState = SWAPW(entry->newStateOffset);
     IndicRearrangementFlags flags = (IndicRearrangementFlags) SWAPW(entry->flags);
 
--- openjdk/jdk/src/share/native/sun/font/layout/IndicRearrangementProcessor.h.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/IndicRearrangementProcessor.h
@@ -52,7 +52,7 @@ class IndicRearrangementProcessor : publ
 public:
     virtual void beginStateTable();
 
-    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index);
+    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success);
 
     virtual void endStateTable();
 
--- openjdk/jdk/src/share/native/sun/font/layout/LigatureSubstProc.cpp.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/LigatureSubstProc.cpp
@@ -67,9 +67,8 @@ void LigatureSubstitutionProcessor::begi
     m = -1;
 }
 
-ByteOffset LigatureSubstitutionProcessor::processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index)
+ByteOffset LigatureSubstitutionProcessor::processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success)
 {
-  LEErrorCode success = LE_NO_ERROR;
   const LigatureSubstitutionStateEntry *entry = entryTable.getAlias(index, success);
   if (LE_FAILURE(success)) {
       currGlyph++;
--- openjdk/jdk/src/share/native/sun/font/layout/LigatureSubstProc.h.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/LigatureSubstProc.h
@@ -54,7 +54,7 @@ class LigatureSubstitutionProcessor : pu
 public:
     virtual void beginStateTable();
 
-    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index);
+    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success);
 
     virtual void endStateTable();
 
--- openjdk/jdk/src/share/native/sun/font/layout/StateTableProcessor.cpp.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/StateTableProcessor.cpp
@@ -81,6 +81,7 @@ void StateTableProcessor::process(LEGlyp
 
     while (currGlyph <= glyphCount) {
         if(LE_STATE_PATIENCE_DECR()) break; // patience exceeded.
+        if (LE_FAILURE(success)) break;
         ClassCode classCode = classCodeOOB;
         if (currGlyph == glyphCount) {
             // XXX: How do we handle EOT vs. EOL?
@@ -100,7 +101,7 @@ void StateTableProcessor::process(LEGlyp
         EntryTableIndex entryTableIndex = stateArray.getObject((le_uint8)classCode, success);
         if (LE_FAILURE(success)) { break; }
         LE_STATE_PATIENCE_CURR(le_int32, currGlyph);
-        currentState = processStateEntry(glyphStorage, currGlyph, entryTableIndex);
+        currentState = processStateEntry(glyphStorage, currGlyph, entryTableIndex, success);
         LE_STATE_PATIENCE_INCR(currGlyph);
     }
 
--- openjdk/jdk/src/share/native/sun/font/layout/StateTableProcessor.h.orig
+++ openjdk/jdk/src/share/native/sun/font/layout/StateTableProcessor.h
@@ -53,7 +53,7 @@ public:
 
     virtual void beginStateTable() = 0;
 
-    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index) = 0;
+    virtual ByteOffset processStateEntry(LEGlyphStorage &glyphStorage, le_int32 &currGlyph, EntryTableIndex index, LEErrorCode &success) = 0;
 
     virtual void endStateTable() = 0;
 
