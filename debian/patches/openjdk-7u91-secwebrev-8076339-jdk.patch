# HG changeset patch
# User igerasim
# Date 1438292916 -10800
#      Fri Jul 31 00:48:36 2015 +0300
# Node ID cf0cf52d0c6ca13ac11e48296f4ee712a4aa034d
# Parent  f7fad52517da79fc17ffd23fa4acdab6a889b9eb
8076339: Better handling of remote object invocation
Reviewed-by: asmotrak, igerasim, skoivu

Index: openjdk/jdk/src/share/classes/java/rmi/server/RemoteObjectInvocationHandler.java
===================================================================
--- openjdk/jdk/src/share/classes/java/rmi/server/RemoteObjectInvocationHandler.java.orig
+++ openjdk/jdk/src/share/classes/java/rmi/server/RemoteObjectInvocationHandler.java
@@ -162,6 +162,14 @@ public class RemoteObjectInvocationHandl
     public Object invoke(Object proxy, Method method, Object[] args)
         throws Throwable
     {
+        if (! Proxy.isProxyClass(proxy.getClass())) {
+            throw new IllegalArgumentException("not a proxy");
+        }
+
+        if (Proxy.getInvocationHandler(proxy) != this) {
+            throw new IllegalArgumentException("handler mismatch");
+        }
+
         if (method.getDeclaringClass() == Object.class) {
             return invokeObjectMethod(proxy, method, args);
         } else if ("finalize".equals(method.getName()) && method.getParameterTypes().length == 0 &&
@@ -186,11 +194,13 @@ public class RemoteObjectInvocationHandl
 
         } else if (name.equals("equals")) {
             Object obj = args[0];
+            InvocationHandler hdlr;
             return
                 proxy == obj ||
                 (obj != null &&
                  Proxy.isProxyClass(obj.getClass()) &&
-                 equals(Proxy.getInvocationHandler(obj)));
+                 (hdlr = Proxy.getInvocationHandler(obj)) instanceof RemoteObjectInvocationHandler &&
+                 this.equals(hdlr));
 
         } else if (name.equals("toString")) {
             return proxyToString(proxy);
