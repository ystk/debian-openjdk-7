# HG changeset patch
# User aivanov
# Date 1468330300 -10800
#      Tue Jul 12 16:31:40 2016 +0300
# Node ID 9cb11ad7fc323d9ab9fdb67cd94907786d5335ee
# Parent  1a32d9a1ee1314e2bbede6bc9885fca4dd342be8
8159495: Fix index offsets
8140530: Creating a VolatileImage with size 0,0 results in no longer working g2d.drawString
Reviewed-by: prr, psadhukhan

---
 openjdk/jdk/src/share/classes/sun/awt/image/SunVolatileImage.java       |    4 
 openjdk/jdk/src/solaris/classes/sun/java2d/x11/X11SurfaceDataProxy.java |   11 +-
 openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRPMBlitLoops.java        |    3 
 openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRSurfaceDataProxy.java   |    8 +
 openjdk/jdk/src/solaris/native/sun/java2d/x11/X11SurfaceData.c          |    9 +
 openjdk/jdk/test/java/awt/image/VolatileImage/VolatileImageBug.java     |   52 ++++++++++
 6 files changed, 81 insertions(+), 6 deletions(-)

--- openjdk/jdk/src/share/classes/sun/awt/image/SunVolatileImage.java.orig
+++ openjdk/jdk/src/share/classes/sun/awt/image/SunVolatileImage.java
@@ -70,6 +70,10 @@ public class SunVolatileImage extends Vo
     {
         this.comp = comp;
         this.graphicsConfig = graphicsConfig;
+        if (width <= 0 || height <= 0) {
+            throw new IllegalArgumentException("Width (" + width + ")" +
+                              " and height (" + height + ") cannot be <= 0");
+        }
         this.width = width;
         this.height = height;
         this.forcedAccelSurfaceType = accType;
--- openjdk/jdk/src/solaris/classes/sun/java2d/x11/X11SurfaceDataProxy.java.orig
+++ openjdk/jdk/src/solaris/classes/sun/java2d/x11/X11SurfaceDataProxy.java
@@ -102,10 +102,13 @@ public abstract class X11SurfaceDataProx
                                            int w, int h)
     {
         if (cachedData == null) {
-            // Bitmask will be created lazily during the blit phase
-            cachedData = X11SurfaceData.createData(x11gc, w, h,
-                                                   x11gc.getColorModel(),
-                                                   null, 0, getTransparency());
+            try {
+                // Bitmask will be created lazily during the blit phase
+                cachedData = X11SurfaceData.createData(x11gc, w, h,
+                                                       x11gc.getColorModel(),
+                                                       null, 0, getTransparency());
+           } catch (OutOfMemoryError oome) {
+           }
         }
         return cachedData;
     }
--- openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRPMBlitLoops.java.orig
+++ openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRPMBlitLoops.java
@@ -134,6 +134,9 @@ public class XRPMBlitLoops {
             vImg = (SunVolatileImage) dst.getGraphicsConfig().createCompatibleVolatileImage(w, h, src.getTransparency());
             vImg.setAccelerationPriority(1.0f);
 
+            if (!(vImg.getDestSurface() instanceof XRSurfaceData)) {
+                throw new InvalidPipeException("Could not create XRSurfaceData");
+            }
             if (src.getTransparency() == SurfaceData.OPAQUE) {
                 rgbTmpPM = new WeakReference<SunVolatileImage>(vImg);
             } else {
--- openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRSurfaceDataProxy.java.orig
+++ openjdk/jdk/src/solaris/classes/sun/java2d/xr/XRSurfaceDataProxy.java
@@ -59,8 +59,12 @@ public class XRSurfaceDataProxy extends
     public SurfaceData validateSurfaceData(SurfaceData srcData,
             SurfaceData cachedData, int w, int h) {
         if (cachedData == null) {
-            cachedData = XRSurfaceData.createData(xrgc, w, h, xrgc
-                    .getColorModel(), null, 0, getTransparency());
+            try {
+                cachedData = XRSurfaceData.createData(xrgc, w, h,
+                                                      xrgc.getColorModel(), null, 0,
+                                                      getTransparency());
+            } catch (OutOfMemoryError oome) {
+            }
         }
         return cachedData;
     }
--- openjdk/jdk/src/solaris/native/sun/java2d/x11/X11SurfaceData.c.orig
+++ openjdk/jdk/src/solaris/native/sun/java2d/x11/X11SurfaceData.c
@@ -456,6 +456,15 @@ jboolean XShared_initSurface(JNIEnv *env
         xsdo->drawable = drawable;
         xsdo->isPixmap = JNI_FALSE;
     } else {
+        /*
+         * width , height must be nonzero otherwise XCreatePixmap
+         * generates BadValue in error_handler
+         */
+        if (width <= 0 || height <= 0 || width > 32767 || height > 32767) {
+            JNU_ThrowOutOfMemoryError(env,
+                                  "Can't create offscreen surface");
+            return JNI_FALSE;
+        }
         xsdo->isPixmap = JNI_TRUE;
         /* REMIND: workaround for bug 4420220 on pgx32 boards:
            don't use DGA with pixmaps unless USE_DGA_PIXMAPS is set.
--- /dev/null
+++ openjdk/jdk/test/java/awt/image/VolatileImage/VolatileImageBug.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import java.awt.GraphicsConfiguration;
+import java.awt.GraphicsEnvironment;
+import java.awt.image.VolatileImage;
+
+/**
+ * @test
+ * @bug 8140530
+ * @run main VolatileImageBug
+ * @summary Creating volatileimage(0,0) should throw IAE
+ */
+public class VolatileImageBug {
+    public static void main(String[] args) {
+
+        boolean iaeThrown = false;
+        GraphicsEnvironment ge = GraphicsEnvironment.
+                                      getLocalGraphicsEnvironment();
+        GraphicsConfiguration gc = ge.getDefaultScreenDevice().
+                                           getDefaultConfiguration();
+        try {
+            VolatileImage volatileImage = gc.createCompatibleVolatileImage(0, 0);
+        } catch (IllegalArgumentException iae) {
+            iaeThrown = true;
+        }
+        if (!iaeThrown) {
+            throw new RuntimeException ("IllegalArgumentException not thrown " +
+                                        "for createCompatibleVolatileImage(0,0)");
+        }
+    }
+}
+
